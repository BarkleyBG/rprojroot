% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/file.R, R/rrmake.R
\name{find_root_file}
\alias{find_package_root_file}
\alias{find_root_file}
\alias{find_rstudio_root_file}
\alias{make_find_root_file}
\title{File paths relative to the root of a directory hierarchy}
\usage{
find_root_file(filename, contents = NULL, n = -1L, ..., path = getwd())

make_find_root_file(filename, contents = NULL, n = -1L)

find_rstudio_root_file(..., path = getwd())

find_package_root_file(..., path = getwd())
}
\arguments{
\item{filename,contents}{Regular expressions to match the file name or contents}

\item{n}{integer.  The (maximal) number of lines to
    read.  Negative values indicate that one should read up to the end of
    input on the connection.}

\item{...}{Additional arguments passed to \code{\link{file.path}}}

\item{path}{The start directory}
}
\value{
The normalized path of the root as specified by the search criteria.
  Throws an error if no root is found
}
\description{
Append an arbitrary number of path components to the root using
\code{\link[base]{file.path}}.
}
\details{
The \code{find_root_file} function is a simple wrapper around
\code{\link{find_root}} that
appends an arbitrary number of path components to the root using
\code{\link[base]{file.path}}.
The function \code{make_find_root_file} can be used to create shorthand functions
such as \code{find_rstudio_root_file} and \code{find_package_root_file}.
You may want to alias the latter two with a much shorter name in your code.
}
\examples{
find_package_root_file("tests", "testthat.R")
make_find_root_file(glob2rx("DESCRIPTION"), "^Package: ")
}
\seealso{
\code{\link{find_root}} \code{\link[utils]{glob2rx}} \code{\link[base]{file.path}}
}

